import{N as d,O as l,r as p,u as c,i as n}from"./index-0513d032.js";const f=d("Auth",{state:()=>({webUser:l("webUser",{}),webToken:l("webToken",null),authenticatedweb:l("authenticatedweb",!1),verify:!1,authErrors:p({}),role:"",msg:"",loading:p(!1),router:c()}),getters:{user:e=>e.webUser,token:e=>e.webToken,errors:e=>e.authErrors,getErrorsByAction:e=>t=>e.authErrors[t]||[],successMsg:e=>e.msg},actions:{async getUser(){var e,t;if(this.authenticatedweb&&this.webToken)try{const r=await n.get("/api/get-user",{headers:{Authorization:`Bearer ${this.webToken}`}});this.webUser=r.data.user,this.role=r.data.user.role||""}catch(r){this.authErrors.getUser=[((t=(e=r.response)==null?void 0:e.data)==null?void 0:t.message)||"Failed to fetch user data."],this.clearAllData(),this.router.push({name:"Login"})}},async handleLogin(e){var t;this.authErrors.login=[],this.loading=!0,this.resetAuthStore();try{const r=e.type==="phone"?{phone:`${e.phoneNumber}`,password:e.password}:{email:e.email,password:e.password},a=await n.post("/api/login",r);(t=a.data.data)!=null&&t.access_token?(this.authenticatedweb=!0,this.webToken=a.data.data.access_token,this.webUser=a.data.data.user,this.router.push({name:"home"})):this.authErrors.login=["Invalid credentials. Please try again."]}catch(r){r.response?r.response.status===422?this.authErrors.login=r.response.data.errors?Object.values(r.response.data.errors).flat():["Validation failed. Please check your inputs."]:r.response.status===401?this.authErrors.login=["Invalid credentials."]:this.authErrors.login=[r.response.data.message||"An error occurred during login."]:r.request?this.authErrors.login=["Network error. Please check your connection."]:this.authErrors.login=["An unexpected error occurred."]}finally{this.loading=!1}},async handleRegister(e){var t,r,a;if(!this.loading){this.resetAuthStore(),this.loading=!0;try{const s={name:e.name,email:e.email,password:e.password,password_confirmation:e.password_confirmation,phone:e.phone?`${e.countryCode}${e.phone}`:void 0,otp_type:e.otp_type};(await n.post("/api/register",s)).data.is_success?this.router.push({name:"otp",params:{type:"register"},query:{email:e.email,phone:e.phone?`${e.countryCode}${e.phone}`:void 0,otp_type:e.otp_type}}):this.authErrors.register=["Registration failed. Please try again."]}catch(s){((t=s.response)==null?void 0:t.status)===422?this.authErrors.register=s.response.data.errors?Object.values(s.response.data.errors).flat():["Validation failed. Please check your inputs."]:this.authErrors.register=[((a=(r=s.response)==null?void 0:r.data)==null?void 0:a.message)||"Registration failed. Please try again."]}finally{this.loading=!1}}},async handleLogout(){var e,t;this.loading=!0;try{await n.post("/api/logout",{},{headers:{Authorization:`Bearer ${this.webToken}`}})}catch(r){this.authErrors.logout=[((t=(e=r.response)==null?void 0:e.data)==null?void 0:t.message)||"Logout failed."]}finally{this.clearAllData(),this.router.push({name:"Login"})}},async forgotPassword(e){var t,r,a;try{this.resetAuthStore();const s=await n.post("/api/forgot-password",{email:e.email});this.msg=s.data.status,this.router.push({name:"ResetPassword"})}catch(s){((t=s.response)==null?void 0:t.status)===422?this.authErrors.forgotPassword=Object.values(s.response.data.errors).flat():this.authErrors.forgotPassword=[((a=(r=s.response)==null?void 0:r.data)==null?void 0:a.message)||"Password reset request failed."]}},async resetPassword(e){var t,r,a;try{this.resetAuthStore(),await n.post("/api/reset-password",e),this.router.push({name:"Login"})}catch(s){((t=s.response)==null?void 0:t.status)===422?this.authErrors.resetPassword=Object.values(s.response.data.errors).flat():this.authErrors.resetPassword=[((a=(r=s.response)==null?void 0:r.data)==null?void 0:a.message)||"Password reset failed."]}},async handleGoogleLogin({token:e}){var t,r,a;this.authErrors.googleLogin=[],this.loading=!0,this.resetAuthStore();try{const s=await n.post("/api/google-login",{token:e});(t=s.data.data)!=null&&t.access_token?(this.webToken=s.data.data.access_token,this.webUser=s.data.data.user,this.role=s.data.data.user.role||"",this.router.push({name:"Home"})):this.authErrors.googleLogin=["Google login failed. Please try again."]}catch(s){this.authErrors.googleLogin=[((a=(r=s.response)==null?void 0:r.data)==null?void 0:a.message)||"Google login failed."]}finally{this.loading=!1}},async verifyOtp({email:e,phone:t,otp:r}){var a,s,i;this.authErrors.verifyOtp=[],this.loading=!0;try{const o={email:e,phone:t,otp:r};if((await n.post("/api/verify-otp",o)).data.is_success)this.verify=!0,setTimeout(()=>{this.verify&&(this.verify=!1,console.log("Verify state reset to false after 1 minute"))},1e3);else return this.authErrors.verifyOtp=["Invalid OTP. Please try again."],!1}catch(o){return((a=o.response)==null?void 0:a.status)===422?this.authErrors.verifyOtp=o.response.data.errors?Object.values(o.response.data.errors).flat():["Invalid OTP. Please check your input."]:this.authErrors.verifyOtp=[((i=(s=o.response)==null?void 0:s.data)==null?void 0:i.message)||"OTP verification failed."],!1}finally{this.loading=!1}},async resendOtp({email:e,phone:t,otp_type:r}){var a,s,i;this.authErrors.resendOtp=[],this.loading=!0;try{const o={email:e,phone:t,otp_type:r},h=await n.post("/api/resend-otp",o);this.msg=h.data.message||"OTP resent successfully."}catch(o){((a=o.response)==null?void 0:a.status)===422?this.authErrors.resendOtp=o.response.data.errors?Object.values(o.response.data.errors).flat():["Failed to resend OTP. Please check your inputs."]:this.authErrors.resendOtp=[((i=(s=o.response)==null?void 0:s.data)==null?void 0:i.message)||"Failed to resend OTP."]}finally{this.loading=!1}},async handleResetPassword(e){var t,r,a;this.authErrors.handleResetPassword=[],this.loading=!0,this.resetAuthStore();try{const s={email:e.email,phone:e.phone?`${e.countryCode}${e.phone}`:void 0,otp_type:e.otp_type},i=await n.post("/api/send-otp",s);this.msg=i.data.message||"Password reset request sent successfully.",this.router.push({name:"changepassword",params:{type:"reset-password"},query:{email:e.email,phone:e.phone?`${e.countryCode}${e.phone}`:void 0,otp_type:e.otp_type}})}catch(s){((t=s.response)==null?void 0:t.status)===422?this.authErrors.handleResetPassword=s.response.data.errors?Object.values(s.response.data.errors).flat():["Validation failed. Please check your inputs."]:this.authErrors.handleResetPassword=[((a=(r=s.response)==null?void 0:r.data)==null?void 0:a.message)||"Password reset request failed."]}finally{this.loading=!1}},async completePasswordReset({email:e,phone:t,otp:r,password:a}){var s,i,o;this.authErrors.completePasswordReset=[],this.loading=!0;try{const h={email:e,phone:t,otp:r,password:a,password_confirmation:a},u=await n.post("/api/change-password",h);u.data.is_success?(this.msg=u.data.message||"Password reset successfully.",this.router.push({name:"authlog"})):this.authErrors.completePasswordReset=["Password reset failed. Please try again."]}catch(h){((s=h.response)==null?void 0:s.status)===422?this.authErrors.completePasswordReset=h.response.data.errors?Object.values(h.response.data.errors).flat():["Validation failed. Please check your inputs."]:this.authErrors.completePasswordReset=[((o=(i=h.response)==null?void 0:i.data)==null?void 0:o.message)||"Password reset failed."]}finally{this.loading=!1}},resetAuthStore(){this.authErrors={},this.msg="",this.loading=!1},clearAllData(){this.webUser={},this.webToken=null,this.authenticatedweb=!1,this.authErrors={},this.msg="",this.loading=!1,this.role="",this.verify=!1},clearErrors(e=null){e?this.authErrors[e]=[]:this.authErrors={}}}});export{f as u};
